{"version":3,"sources":["timesheet-parser.js","components/Hotkey.js","components/store.js","components/generic.js","components/AccumulationGraph.jsx","components/SectionView.js","components/Calendar.js","selectors.js","components/TaskView.js","utils.js","components/EverhourLog.js","components/Projects.js","index.js"],"names":["isEmpty","line","isCommentLine","indexOf","isDate","isSection","timeValue","hours","minutes","parseTime","str","split","Number","parseInt","expressions","date","task","section","default","withExpectedTime","parseSection","content","number","test","exec","name","expectedTime","trim","type","value","parseDate","format","parseTask","start","end","path","description","startTime","endTime","total","console","error","lines","currentSection","currentDate","map","n","filter","sections","forEach","tasks","push","Component","KeyHandler","event","props","disabled","enabled","onKeyDown","preventDefault","onKeyUp","keys","on","off","initialState","data","reducer","state","action","Context","StoreProvider","children","dispatch","Block","Inline","Time","hrs","Math","floor","abs","min","String","padStart","SVG","styled","svg","Bar","rect","attrs","x","index","width","y","height","minValue","range","max","bars","length","Duration","tasksTotalTime","reduce","SectionName","Panel","Table","ActualTime","ExpectedTime","TimeDifference","color","SectionElement","sectionTotal","expectedTimeDifferenceTotal","difference","StoreContext","sectionList","Object","values","accumulation","acc","current","diff","sectionItems","slice","Array","from","reverse","MonthGrid","Header","Day","outside","active","WeekDay","previousDays","day","daysInMonth","subtract","daysBefore","v","i","nextDays","lastDay","daysAfter","endOf","firstDay","startOf","weekDays","daysIn","selectByDate","selectByWeek","startOfWeek","isSame","groupByProject","project","groupByDate","tasksTotal","DATE_FORMAT","LONG_DATE","Layout","Main","DayTitle","TaskListWrapper","Big","Small","Path","TimeBlock","Task","Board","Container","BoardBlock","duration","className","style","top","round","DetailedDay","blocks","id","textAlign","WeekSchedule","detailedDays","add","tasksOfDay","tasksOfWeek","groupedTasksOfWeek","moveDate","amount","timeFormat","ClipboardContext","ClipboardProvider","clipboard","setClipboard","multiLine","singleLine","describeDay","descriptions","join","CopyElement","CopyBlock","clipboardContent","writeText","Project","items","entries","tasksByProject","totalsByProject","projectName","useIPCEvent","callback","callbackRef","log","handler","ipcRenderer","actions","setData","GlobalStyle","createGlobalStyle","useFileWatch","currentContent","setCurrentContent","currentPath","watcher","readFile","err","chokidar","watch","filename","page","setPage","container","document","createElement","body","appendChild","once","render"],"mappings":"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","file":"index.js","sourceRoot":"../renderer","sourcesContent":["import dayjs from 'dayjs'\n\nconst isEmpty = line => line === ''\n\nconst isCommentLine = line => line.indexOf('#') === 0\nconst isDate = line => line.indexOf('--') === 0\nconst isSection = line => line.indexOf('===') === 0\n\nconst timeValue = (hours, minutes) => hours * 60 + minutes\n\nconst parseTime = str => {\n  const [ hours, minutes ] = str.split(':')\n  return Number.parseInt(hours) * 60 + Number.parseInt(minutes)\n}\n\nconst expressions = {\n  date: /^--\\s?(?<date>\\d{2,4}\\-\\d{2}\\-\\d{2})/,\n  task: /^(?<start>\\d\\d:\\d\\d)\\s?-\\s?(?<end>\\d\\d:\\d\\d)\\s?(?:->|\\|)?\\s?(?:\\[(?<path>.+)\\])?\\s?(?<description>.+)?/,\n  section: {\n    default: /^===\\s?(?<name>.+)===$/,\n    withExpectedTime: /^===\\s?(?<name>.+)\\s\\((?<expected>\\d+:\\d{1,2})\\)\\s?===$/\n  }\n}\n\n// Parse section\nconst parseSection = ({content, number}) => {\n  if (expressions.section.withExpectedTime.test(content)) {\n    const [ full, name, expectedTime ] = expressions.section.withExpectedTime.exec(content)\n    const value = name.trim()\n    return {type: 'section', value: {\n      name: name.trim(),\n      expectedTime: parseTime(expectedTime)\n    }}\n  } else if (expressions.section.default.test(content)) {\n    const [ full, name ] = expressions.section.default.exec(content)\n    const value = name.trim()\n    return {type: 'section', value: {\n      name: name.trim(),\n      expectedTime: null\n    }}\n  }\n}\n\nconst parseDate = ({ content, number }) => {\n  const [ full, date ] = expressions.date.exec(content)\n\n  if (date) {\n    return {type: 'date', value: dayjs(date).format('YYYY-MM-DD')}\n  }\n}\n\nconst parseTask = ({ content }) => {\n  const [ full, start, end, path, description ] = expressions.task.exec(content)\n\n  const startTime = parseTime(start)\n  const endTime = parseTime(end)\n\n  const total = endTime - startTime\n\n  if (total < 0) {\n    console.error(`Negative time error on line ${number}`)\n  }\n\n  return {type: 'task', value: {\n    start: startTime,\n    end: endTime,\n    total,\n    path,\n    description\n  }}\n}\n\nexport default content => {\n  const lines = content.split('\\n')\n    .map((line, n) => ({number: n, content: line}))\n    .filter(line => !isCommentLine(line.content) && !isEmpty(line.content))\n    .map(line => {\n      if (isSection(line.content)) {\n        return parseSection(line)\n      } else if (isDate(line.content)) {\n        return parseDate(line)\n      } else {\n        return parseTask(line)\n      }\n    })\n\n  const sections = {}\n\n  let currentSection\n  let currentDate\n\n  lines.forEach(line => {\n    if (line.type === 'section') {\n      currentSection = line.value.name\n      sections[currentSection] = {...line.value, tasks: []}\n    }\n\n    if (line.type === 'date') {\n      currentDate = line.value\n    }\n\n    if (line.type === 'task') {\n      line.value.date = currentDate\n      line.value.section = currentSection\n      sections[currentSection].tasks.push(line.value)\n    }\n  })\n\n  const tasks = lines.filter(line => line.type === 'task').map(line => line.value)\n\n  return {tasks, sections}\n}\n","import React, {Component} from 'react'\nimport keyboardJS from 'keyboardjs'\n\n/**\n * Wraps the Keyboard JS module into a React Component\n */\nexport default class KeyHandler extends Component {\n  onKeyDown(event) {\n    const {disabled = false, enabled = true, onKeyDown, preventDefault = false} = this.props\n\n    if (!disabled && enabled && onKeyDown) {\n      if (preventDefault) {\n        event.preventDefault()\n      }\n      onKeyDown(event)\n    }\n  }\n\n  onKeyUp(event) {\n    const {disabled = false, enabled = true, onKeyUp, preventDefault = false} = this.props\n\n    if (!disabled && enabled && onKeyUp) {\n      if (preventDefault) {\n        event.preventDefault()\n      }\n      onKeyUp(event)\n    }\n  }\n\n  componentDidMount() {\n    const {keys} = this.props\n\n    this.onKeyDown = ::this.onKeyDown\n    this.onKeyUp = ::this.onKeyUp\n\n    keyboardJS.on(keys, this.onKeyDown, this.onKeyUp)\n  }\n\n  componentWillUnmount() {\n    const {keys, onKeyDown, onKeyUp} = this.props\n    keyboardJS.off(keys, this.onKeyDown, this.onKeyUp)\n  }\n\n  render() {\n    return null\n  }\n}\n","import dayjs from 'dayjs'\nimport React, { useReducer, createContext } from 'react'\n\nconst initialState = {\n  date: dayjs(),\n  data: {\n    sections: {},\n    tasks: []\n  }\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_DATA': {\n      const { data } = action\n      return {...state, data}\n    }\n\n    case 'SET_DATE': {\n      const { date } = action\n      return {...state, date}\n    }\n  }\n\n  return state\n}\n\nconst Context = createContext()\nexport default Context\n\nexport const StoreProvider = ({ children }) => {\n  const [ state, dispatch ] = useReducer(reducer, initialState)\n  return <Context.Provider value={[state, dispatch]} children={children} />\n}\n","export const Block = 'div'\nexport const Inline = 'span'\n\nexport const Time = ({ value }) => {\n  const hrs = (Math.floor(Math.abs(value / 60)))\n  const min = Math.abs(value % 60)\n  return `${String(hrs).padStart(2, '0')}:${String(min).padStart(2, '0')}`\n}\n","import React, { Fragment } from 'react'\nimport styled from 'styled-components'\n\nconst SVG = styled.svg`\n  background: #333344;\n  transform: scaleY(-1);\n  padding: 20px 0;\n`\n\nconst Bar = styled.rect.attrs(({ value, index, width }) => ({\n  x: index * width,\n  y: value < 1 ? value : 0,\n  height: Math.abs(value)\n}))`\n  fill: ${({ value }) => value > 0 ? 'mediumseagreen' : 'tomato'};\n`\n\nexport default ({ data }) => {\n  const minValue = Math.min(...data)\n  const maxValue = Math.max(...data)\n  const range = maxValue - minValue\n\n  const bars = data.map((value, index) => (\n    <Bar key={index} value={value} index={index} width={1} />\n  ))\n\n  return (\n    <Fragment>\n      <SVG preserveAspectRatio={'none'} height={128} width={'100%'} viewBox={`${0} ${minValue} ${data.length} ${range}`}>\n        {bars}\n      </SVG>\n    </Fragment>\n  )\n}\n","import { last } from 'lodash'\nimport React, { Fragment, useContext } from 'react'\nimport styled from 'styled-components'\nimport StoreContext from './store'\nimport { Block, Time } from './generic'\nimport AccumulationGraph from './AccumulationGraph'\n\nconst Duration = ({ value }) => {\n  const hours = Math.floor(value / 60)\n  const minutes = value % 60\n  return `${hours && `${hours}h\\u00a0` || ''}${minutes && `${minutes}m` || ''}`\n}\n\nconst tasksTotalTime = tasks => tasks.reduce((total, task) => total + task.total, 0)\n\nconst SectionName = styled(Block)`\n  font-weight: 600;\n  font-size: 16px;\n`\nconst Panel = styled(Block)`\n  margin: 10px;\n`\n\nconst Table = styled(Block)`\n  display: table;\n  min-width: 512px;\n`\n\nconst ActualTime = styled(Block)`\n  font-weight: 600;\n  font-size: 16px;\n  margin-bottom: 4px;\n`\n\nconst ExpectedTime = styled(Block)`\n  font-size: 14px;\n`\n\nconst TimeDifference = styled(({ value, ...props }) => ((value < 0)\n  ? <Block {...props} style={{color: 'tomato'}}>-<Duration value={-value} /></Block>\n  : <Block {...props} style={{color: 'MediumSeaGreen'}}><Duration value={value} /></Block>\n))`\n  font-size: 16px;\n  font-weight: 600;\n`\n\nconst SectionElement = styled(({ name, expectedTime, tasks, total, ...props }) => {\n  const sectionTotal = tasksTotalTime(tasks)\n\n  return (\n    <Block {...props}>\n      <SectionName children={name} />\n      <Block>\n        <ActualTime><Duration value={sectionTotal} /></ActualTime>\n        <ExpectedTime><Duration value={expectedTime} /></ExpectedTime>\n      </Block>\n      <Block><TimeDifference value={expectedTime && sectionTotal - expectedTime} /></Block>\n      <Block><TimeDifference value={total} /></Block>\n    </Block>\n  )\n})`\n  display: table-row;\n\n  > div {\n    display: table-cell;\n    padding: 16px;\n    vertical-align: middle;\n    border-top: 2px solid #eee;\n  }\n`\n\nconst expectedTimeDifferenceTotal = sections => sections.reduce((difference, section) => {\n  if (section.expectedTime !== null) {\n    return difference + (tasksTotalTime(section.tasks) - section.expectedTime)\n  }\n\n  return difference\n}, 0)\n\nexport default () => {\n  const [ state, dispatch ] = useContext(StoreContext)\n  const { data: { sections, tasks } } = state\n\n  const sectionList = Object.values(sections)\n\n  const accumulation = sectionList.reduce((acc, current) => {\n    const total = last(acc) || 0\n\n    const diff = (current.expectedTime)\n      ? tasksTotalTime(current.tasks) - current.expectedTime\n      : 0\n\n    return [...acc, total + diff]\n  }, [])\n\n  const sectionItems = sectionList.map((section, index) => (\n    <SectionElement key={section.name} {...section} total={accumulation[index]} />\n  ))\n\n  const currentDifference = expectedTimeDifferenceTotal(sectionList)\n  const lastSectionDifference = expectedTimeDifferenceTotal(sectionList.slice(0, -1))\n\n  return (\n    <Fragment>\n      <AccumulationGraph data={accumulation.map(value => value / 60)} />\n\n      <Table>\n        {Array.from(sectionItems).reverse()}\n      </Table>\n    </Fragment>\n  )\n}\n\n","import dayjs from 'dayjs'\nimport React, { Fragment } from 'react'\nimport styled from 'styled-components'\nimport { Block } from './generic'\n\nconst MonthGrid = styled(Block)`\n  width: calc(20px * 7);\n  height: calc(20px * 7);\n  font-size: 10px;\n  display: inline-grid;\n  grid: auto-flow / repeat(7, 0fr);\n`\n\nconst Header = styled(Block)`\n  width: calc(20px * 7);\n  font-size: 10px;\n  font-size: 12px;\n  text-align: center;\n`\n\nconst Day = styled(Block)`\n  line-height: 20px;\n  width: 20px;\n  height: 20px;\n  text-align: center;\n  border-radius: 2px;\n  ${({ outside }) => outside && `color: #ccc;`}\n  ${({ active }) => active && `\n    background-color: DodgerBlue;\n    color: white;\n  `}\n`\n\nconst WeekDay = styled(Day)`\n  font-weight: bold;\n`\n\nconst previousDays = day => {\n  const daysInMonth = day.subtract(1, 'month').daysInMonth()\n  const daysBefore = day.day()\n  return [...Array(daysBefore)].map((v, i) => <Day key={i} outside children={(1 + daysInMonth - (daysBefore - i))} />)\n}\n\nconst nextDays = day => {\n  const lastDay = day.endOf('month')\n  const daysAfter = 6 - lastDay.day()\n  return [...Array(daysAfter)].map((v, i) => <Day key={i} outside children={i + 1} />)\n}\n\nexport default ({ date }) => {\n  const firstDay = date.startOf('month')\n\n  const weekDays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'].map(day => <WeekDay key={day} children={day} />)\n\n  const daysIn = [...Array(firstDay.daysInMonth())].map((v, i) => {\n    return <Day key={i} children={i + 1} active={date.date() === i + 1} />\n  })\n\n  return (\n    <Fragment>\n      <Header>{date.format('MMMM YYYY')}</Header>\n      <MonthGrid children={[weekDays, previousDays(firstDay), daysIn, nextDays(firstDay)]} />\n    </Fragment>\n  )\n}\n","import { groupBy } from 'lodash'\nimport dayjs from 'dayjs'\n\nexport const selectByDate = (tasks, date) => tasks.filter(task => task.date === date)\n\nexport const selectByWeek = (tasks, date) => {\n  const startOfWeek = dayjs(date).startOf('week')\n  return tasks.filter(task => startOfWeek.isSame(dayjs(task.date).startOf('week')))\n}\n\nexport const groupByProject = tasks => groupBy(tasks, task => {\n  const [ project ] = task.path.split(/(:|\\/)/)\n  return project\n})\n\nexport const groupByDate = tasks => groupBy(tasks, task => {\n  return task.date\n})\n\nexport const tasksTotal = tasks => tasks.reduce((total, task) => total + task.total, 0)\n","import dayjs from 'dayjs'\nimport React, { Fragment, useContext, useState } from 'react'\nimport styled from 'styled-components'\nimport Hotkey from './Hotkey'\nimport StoreContext from './store'\nimport { Block, Time } from './generic'\nimport Calendar from './Calendar'\nimport { selectByDate, selectByWeek, groupByDate, tasksTotal } from '../selectors'\n\nconst DATE_FORMAT = 'YYYY-MM-DD'\nconst LONG_DATE = 'ddd, MMMM D, YYYY'\n\nconst Layout = styled(Block)`\n  display: grid;\n  width: 100vw;\n  height: 100vh;\n  grid: auto / 0fr 1fr;\n  overflow: hidden;\n`\n\nconst Header = styled(Block)`\n  padding: 20px;\n`\n\nconst Main = styled(Block)`\n  display: grid;\n  grid: 0fr 1fr / auto;\n  height: 100vh;\n`\n\nconst DayTitle = styled(Block)`\n  font-size: 16px;\n  margin-bottom: 4px;\n`\n\nconst TaskListWrapper = styled(Block)`\n  background: #efefef;\n  padding: 20px;\n  overflow-y: scroll;\n`\n\nconst Big = styled(Block)`\n  padding: 2px 10px;\n`\n\nconst Small = styled(Block)`\n  padding: 2px 10px;\n  font-size: 10px;\n`\nconst Path = styled(Small)`\n  background: #efefef;\n`\n\nconst TimeBlock = styled(Block)`\n  text-align: right;\n`\n\nconst Task = styled(({ start, end, total, path, description, ...props }) => {\n  return (\n    <Block {...props}>\n      <TimeBlock>\n        <Small><Time value={start} /> - <Time value={end} /></Small>\n        <Big><Time value={total} /></Big>\n      </TimeBlock>\n      <Block>\n        <Path children={path} />\n        <Big>{description}</Big>\n      </Block>\n    </Block>\n  )\n})`\n  display: flex;\n  margin: 1px 0;\n  border-radius: 2px;\n  padding: 10px;\n  background-color: #fff;\n  border-left: 3px solid red;\n`\n// -------------------------------------\nconst Board = styled(Block)`\n  position: relative;\n  height: 288px;\n  width: 100px;\n  background: #eee;\n  margin: 2px;\n\n  ${({ active }) => active && `\n    background: #ddd;\n  `}\n`\n\nconst Container = styled(Block)`\n  display: flex;\n`\n\nconst BoardBlock = styled(({ start, duration, className }) => {\n  const style = {\n    top: Math.round(start / 5) + 'px',\n    height: Math.round(duration / 5) + 'px'\n  }\n\n  return <div className={className} style={style} />\n})`\n  position: absolute;\n  background: dodgerblue;\n  width: 100%;\n`\n\nconst DetailedDay = ({ date, tasks = [], active = false }) => {\n  const blocks = tasks.map((task, id) => (<BoardBlock key={id} start={task.start} duration={task.total} />))\n\n  return (\n    <div>\n      <header style={{textAlign: 'center'}}>\n        <p>{date.format('ddd')}</p>\n        <p>{date.format('MMM D')}</p>\n      </header>\n      <Board active={active}>{blocks}</Board>\n    </div>\n  )\n}\n\n\n\nconst WeekSchedule = ({ date, tasks }) => {\n  const startOfWeek = date.startOf('week')\n\n  const detailedDays = [...Array(7)].map((v, i) => {\n    const current = startOfWeek.add(i, 'day')\n    return <DetailedDay date={current} key={i} active={current.format(DATE_FORMAT) === date.format(DATE_FORMAT)} tasks={tasks[current.format(DATE_FORMAT)]} />\n  })\n\n  return (<Container>{detailedDays}</Container>)\n}\n\nexport default () => {\n  const [ state, dispatch ] = useContext(StoreContext)\n  const { data: { tasks, sections }, date } = state\n\n  const tasksOfDay = selectByDate(tasks, date.format(DATE_FORMAT))\n  const tasksOfWeek = selectByWeek(tasks, date.format(DATE_FORMAT))\n  const groupedTasksOfWeek = groupByDate(tasksOfWeek)\n\n\n  const moveDate = amount =>\n    dispatch({type: 'SET_DATE', date: date.add(amount, 'day')})\n\n\n  return (\n    <Layout>\n      <Header>\n        <Calendar date={date} />\n      </Header>\n\n      <Main>\n        <Header>\n          <DayTitle children={date.format(LONG_DATE)} />\n          <Block>\n            <Block><Time value={tasksTotal(tasksOfDay)} /> / <Time value={tasksTotal(tasksOfWeek)} /></Block>\n          </Block>\n        </Header>\n\n        <div>\n          <WeekSchedule date={date} tasks={groupedTasksOfWeek} />\n        </div>\n\n        <TaskListWrapper children={\n          tasksOfDay.length\n          ? tasksOfDay.map((task, i) => <Task key={i} {...task} />)\n          : 'No task on this day'\n        } />\n      </Main>\n\n      <Hotkey keys={'h'} onKeyDown={() => moveDate(-1)} />\n      <Hotkey keys={'j'} onKeyDown={() => moveDate(7)} />\n      <Hotkey keys={'k'} onKeyDown={() => moveDate(-7)} />\n      <Hotkey keys={'l'} onKeyDown={() => moveDate(1)} />\n    </Layout>\n  )\n}\n","export const timeFormat = value => {\n  const hrs = (Math.floor(Math.abs(value / 60)))\n  const min = Math.abs(value % 60)\n  return `${String(hrs).padStart(2, '0')}:${String(min).padStart(2, '0')}`\n}\n","import dayjs from 'dayjs'\nimport uniqid from 'uniqid'\nimport { uniq } from 'lodash'\nimport { clipboard } from 'electron'\nimport React, { Fragment, createContext, useContext, useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { Block, Time } from './generic'\nimport Hotkey from './Hotkey'\nimport StoreContext from './store'\nimport Calendar from './Calendar'\nimport { selectByDate, tasksTotal, groupByProject } from '../selectors'\nimport { timeFormat } from '../utils'\n\nconst ClipboardContext = createContext()\n\nconst ClipboardProvider = ({ children }) => {\n  const [ clipboard, setClipboard ] = useState('')\n  return <ClipboardContext.Provider value={[clipboard, setClipboard]} children={children} />\n}\n\nconst multiLine = description => `- ${description}`\nconst singleLine = description => `${description}`\n\nconst describeDay = tasks => {\n  const descriptions = uniq(tasks.map(({ description }) => description))\n  const format = descriptions.length > 1 ? multiLine : singleLine\n\n  return descriptions.map(format).join('\\n')\n}\n\nconst Panel = styled(Block)`\n  padding: 20px;\n`\n\nconst CopyElement = styled(Block)`\n  margin: 4px;\n  background-color: #efefef;\n  padding: 10px;\n\n  :hover {\n    background-color: #ccc;\n  }\n\n  ${({ active }) => active && `\n    &, :hover {\n      background-color: dodgerBlue;\n      color: white;\n    }\n  `}\n`\n\nconst CopyBlock = ({ children, content }) => {\n  const id = useRef()\n  const [ clipboardContent, setClipboard ] = useContext(ClipboardContext)\n\n  useEffect(() => {\n    id.current = uniqid()\n  }, [])\n\n  return (\n    <CopyElement active={clipboardContent === id.current} children={children} onClick={() => {\n      setClipboard(id.current)\n      clipboard.writeText(content)\n    }} />\n  )\n}\n\nconst Project = styled(({ name, description, total, ...props }) => (\n  <Block {...props}>\n    <p>{name}</p>\n    <CopyBlock content={timeFormat(total)} children={timeFormat(total)} />\n\n    <CopyBlock content={description}>\n      <pre>{description}</pre>\n    </CopyBlock>\n  </Block>\n))`\n  padding: 10px;\n`\n\nexport default () => {\n  const [ state, dispatch ] = useContext(StoreContext)\n  const { date, data: { tasks } } = state\n\n  const tasksOfDay = selectByDate(tasks, date.format('YYYY-MM-DD'))\n\n  const moveDate = amount =>\n    dispatch({type: 'SET_DATE', date: date.add(amount, 'day')})\n\n  const items = Object.entries(groupByProject(tasksOfDay)).map(([ name, tasks ]) => ({\n    name,\n    total: tasksTotal(tasks),\n    description: describeDay(tasks)\n  }))\n\n  return (\n    <ClipboardProvider>\n      <Block>\n        <Hotkey keys={'h'} onKeyDown={() => moveDate(-1)} />\n        <Hotkey keys={'j'} onKeyDown={() => moveDate(7)} />\n        <Hotkey keys={'k'} onKeyDown={() => moveDate(-7)} />\n        <Hotkey keys={'l'} onKeyDown={() => moveDate(1)} />\n\n        <Panel>\n          <Calendar date={date} />\n        </Panel>\n\n        <Panel>\n          <p>{date.format('dddd, MMMM D, YYYY')}</p>\n          {items.map(project => <Project key={project.name} {...project} />)}\n        </Panel>\n      </Block>\n    </ClipboardProvider>\n  )\n}\n","import dayjs from 'dayjs'\nimport uniqid from 'uniqid'\nimport { uniq } from 'lodash'\nimport { clipboard } from 'electron'\nimport React, { Fragment, createContext, useContext, useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { Block, Time } from './generic'\nimport StoreContext from './store'\nimport { selectByDate, tasksTotal, groupByProject } from '../selectors'\nimport { timeFormat } from '../utils'\n\nexport default ({ data }) => {\n  const [ state, dispatch ] = useContext(StoreContext)\n  const { tasks } = state.data\n\n  const tasksByProject = groupByProject(tasks)\n\n  const totalsByProject = Object.entries(tasksByProject).map(([ projectName, tasks ]) => ({\n    name: projectName,\n    total: tasksTotal(tasks)\n  }))\n\n  return (\n    <Fragment>\n      <p>Projects</p>\n      <ul>\n        {totalsByProject.map(({name, total}) => <li key={name}>{name} <Time value={total} /></li>)}\n      </ul>\n    </Fragment>\n  )\n}\n","import fs from 'fs'\nimport { ipcRenderer } from 'electron'\nimport chokidar from 'chokidar'\nimport React, { Fragment, useContext, useEffect, useRef, useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport styled, { css, createGlobalStyle } from 'styled-components'\nimport timesheetParse from './timesheet-parser'\nimport Hotkey from './components/Hotkey'\nimport StoreContext, { StoreProvider } from './components/store'\nimport SectionView from './components/SectionView'\nimport TaskView from './components/TaskView'\nimport EverhourLog from './components/EverhourLog'\nimport Projects from './components/Projects'\n\nconst useIPCEvent = (event, callback) => {\n  const callbackRef = useRef()\n\n  callbackRef.current = callback\n\n  useEffect(() => {\n    console.log('Run')\n\n    const handler = (event, data) => { callbackRef.current(data) }\n    ipcRenderer.on(event, handler)\n    return () => ipcRenderer.off(event, handler)\n  }, [event])\n}\n\n// TODO Change filename\n\nconst actions = {\n  setData: data  => ({type: 'SET_DATA', data})\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    border: none;\n    outline: none;\n    background: transparent;\n    color: inherit;\n    font-family: inherit;\n    font-size: inherit;\n  }\n\n  body {\n    font-size: 12px;\n    font-family: Cantarell, sans-serif;\n    color: #333;\n  }\n`\nconst useFileWatch = path => {\n  const [ currentContent, setCurrentContent ] = useState()\n  const currentPath = useRef('')\n\n  const watcher = useRef()\n\n  if (path === '') {\n    return\n  }\n\n  // Initial file read\n  fs.readFile(path, 'utf8', (err, content) => setCurrentContent(content))\n\n  if (!watcher.current || currentPath.current !== path) {\n    currentPath.current = path\n\n    watcher.current = chokidar.watch(path)\n\n    watcher.current.on('change', path => {\n      fs.readFile(path, 'utf8', (err, content) => setCurrentContent(content))\n    })\n  }\n\n  return currentContent\n}\n\n\nconst Main = ({ filename }) => {\n  const [ state, dispatch ] = useContext(StoreContext)\n  const [ sections, setSections ] = useState({})\n  const [ tasks, setTasks ] = useState([])\n  const [ page, setPage ] = useState('tasks')\n\n  const content = useFileWatch(filename)\n\n  useEffect(() => {\n    if (content) {\n      const data = timesheetParse(content)\n      dispatch(actions.setData(data))\n    }\n  }, [content])\n\n  return (\n    <Fragment>\n      {page === 'sections' && <SectionView />}\n      {page === 'tasks' && <TaskView />}\n      {page === 'everhour' && <EverhourLog />}\n      {page === 'projects' && <Projects />}\n\n      <Hotkey keys={'s'} onKeyDown={() => setPage('sections')} />\n      <Hotkey keys={'t'} onKeyDown={() => setPage('tasks')} />\n      <Hotkey keys={'e'} onKeyDown={() => setPage('everhour')} />\n      <Hotkey keys={'p'} onKeyDown={() => setPage('projects')} />\n    </Fragment>\n  )\n}\n\nconst Layout = ({ filename }) => {\n  return (\n    <Fragment>\n      <GlobalStyle />\n      <StoreProvider children={<Main filename={filename} />} />\n    </Fragment>\n  )\n}\n\nconst container = document.createElement('div')\ndocument.body.appendChild(container)\n\nipcRenderer.once('file-load', (event, data) => {\n  ReactDOM.render(<Layout filename={data} />, container)\n})\n\n"]}